三个全局变量：
AFX_MODULE_STATE  aaa;        // 当前程序模块状态信息
AFX_MODULE_THREAD_STATE bbb;  // 当前程序线程状态信息
_AFX_THREAD_STATE  ccc;       // 当前程序线程信息

// 0. 构造CMyWinApp的全局对象 theApp
CWinApp::CWinApp(LPCTSTR lpszAppName)
{  
   // 获取全局变量 aaa 的地址
   AFX_MODULE_STATE* pModuleState = _AFX_CMDTARGET_GETSTATE();
//   #define _AFX_CMDTARGET_GETSTATE() (AfxGetModuleState())
   等效于：
   AFX_MODULE_STATE* pModuleState = AfxGetModuleState(); 
   
   // 获取全局变量 bbb 的地址(保存在aaa的一个成员中)
   AFX_MODULE_THREAD_STATE* pThreadState = pModuleState->m_thread;
   
   // 把theApp的地址保存在 bbb 的一个成员m_pCurrentWinThread中
   pThreadState->m_pCurrentWinThread = this;
   // 把theApp的地址保存在 aaa 的一个成员m_pCurrentWinApp中
   pModuleState->m_pCurrentWinApp = this;
}

// 1. MFC框架提供的程序的入口函数
WinMain(...)
{
    AfxWinMain(hInstance, hPrevInstance, lpCmdLine, nCmdShow)
	{
	    // 1.1 获取theApp的地址，保存在pThread和pApp中
	    CWinThread* pThread = AfxGetThread()
	    {
	      // 获取bbb的地址
	      AFX_MODULE_THREAD_STATE* pState = AfxGetModuleThreadState();
	      // 从bbb的成员中取出前面保存的 &theApp
	      CWinThread* pThread = pState->m_pCurrentWinThread;
	      return pThread;
	    }
	    CWinApp* pApp = AfxGetApp()
	    {
	       return afxCurrentWinApp;
	    // #define afxCurrentWinApp    AfxGetModuleState()->m_pCurrentWinApp
	       相当于：
	       return AfxGetModuleState()->m_pCurrentWinApp;
	    }
		// 1.2 框架的内部初始化和应用程序的全局初始化
		AfxWinInit(....);
		pApp->InitApplication();
		// 1.3 重写该虚函数，完成用户的特定的初始化操作
		pThread->InitInstance()                        -- 虚函数1
		{
		    // 回到用户代码，创建和显示窗口
			return TRUE;
		}
		// 1.4 消息循环
		pThread->Run()
		{
		   CWinApp::Run()
		   {
		       CWinThread::Run()                       -- 虚函数2
			   {
			      for (;;)
	              {
				      // 1.4.1 在消息队列中没有消息，作空闲处理
				      while ( !::PeekMessage())
		              {
			            OnIdle(...);                   -- 虚函数3
		              }
					  // 1.4.2 在消息队列中有消息,获取、翻译、派发消息
					  do
		              {
					     PumpMessage()
						 {
						    AfxInternalPumpMessage()
							{
							    ::GetMessage(...);
								::TranslateMessage(...);
								::DispatchMessage(...);
							}
						 }
						 // 退出时，调用ExitInstance函数，作善后处理
						 return ExitInstance();        -- 虚函数4
					  }while(::PeekMessage(...));
				  }
			   }
		   }
		}
	}
}