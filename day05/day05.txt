一、MFC视图
 1. 相关类
  CView类 -- 父类是CWnd类，是一个专门用来显示数据的窗口，通常在框架窗口的客户区。包含了一个纯虚函数 OnDraw()，所以是抽象类。
 2. CView类的使用
  2.1 添加CView类派生的CMyView类，并在CMyView中实现OnDraw函数
  2.2 在CMyFrameWnd类中添加成员指针变量
     CMyView* m_pWndView;
  2.3 在CMyFrameWnd::OnCreate函数中
   2.3.1 创建视图对象 m_pWndView = new CMyViw;
   2.3.2 创建视图窗口 m_pWndView.Create(...);
    void CView::PostNcDestroy()
    {
       delete this;
    }
    void CFrameWnd::PostNcDestroy()
    {
       delete this;
    }
   2.3.3 把视图设置为框架窗口的活动视图
     CFrameWnd::SetActiveView
     CFrameWnd::m_pViewActive
 2.4 视图窗口自适应框架窗口客户区的大小
  m_pWndView->Create(NULL,"MFCView",WS_CHILD|WS_VISIBLE|WS_BORDER,
		CRect(0,0,200,200),this,AFX_IDW_PANE_FIRST);
		                        ~~~~~~~~~~~~~~~~~~
 2.5 命令消息的处理顺序
  活动视图 ----> 框架   ----> 应用程序
 
 2.6 OnDraw()和 OnPaint()之间的关系
   CView::OnPaint()
   {
      ...
      OnDraw(...);
   }
 2.7 CView、CFrameWnd、CWinApp之间的关系
  CWinApp
    |-> m_pMainWnd  (CFrameWnd)
        |-> m_pViewActive  (CView)
        
二、运行时类信息
 1. 概念
   在程序运行时，获取对象的类的信息以及类的继承层次关系
 2. 实现步骤
  2.1 直接或间接派生自CObject类
  2.2 在类的定义中添加运行时类信息的声明宏
       DECLARE_DYNAMIC(theClass)
      在类的实现中添加运行时类信息的实现宏
       IMPLEMENT_DYNAMIC(theClass,baseClass)
  2.3 使用
   2.3.1 相关函数
     IsKindOf
  2.4 实现原理
   2.4.1 展开宏
    见代码
   2.4.2 相关的结构体
    struct CRuntimeClass
    {
	    LPCSTR m_lpszClassName;       // 类名
	    int m_nObjectSize;            // 类的大小
	    UINT m_wSchema;               // 类的版本
	    CObject* (PASCAL* m_pfnCreateObject)(); // 创建对象的函数的函数指针
       CRuntimeClass* m_pBaseClass;  // 指向父类的CRuntimeClass
    }
   2.4.3 成员
    1) classCDog -- 静态的结构体变量，类型是CRuntimeClass。保存了当前类的信息和指向父类CAnimal的结构体变量的指针。
    2) GetRuntimeClass() -- 虚函数。返回classCDog的地址
   2.4.4 成员之间的关系
    GetRuntimeClass()
     |-> &classCDog
       |-> 包含了CDog类的类名、类的大小和版本等信息
       |-> &classCAnimal
         |-> 包含了CAnimal的类名、类的大小和版本等信息
         |-> &classCObject
           |-> 包含了CObject类的类名、类的大小和版本等信息
           |-> NULL
   
   
   dog.IsKindOf(RUNTIME_CLASS(CObject))?      CWnd
                ~~~~~~~~~~~~~~~~~~~~~~
                 classCObject            classCWnd
   classCDog       FALSE                    FALSE
   
   classCAnimal    FALSE                    FALSE
   
   classCObject    TRUE                     FALSE
     
     NULL
  
三、动态创建
 1. 概念
  在程序运行过程创建指定类的对象 (创建未知类型的对象)
 2. 实现
  2.1 编写一个创建对象的函数
  2.2 定义支持动态创建的类
   2.2.1 直接或间接派生自CObject
   2.2.2 在类的定义中添加动态创建的声明宏
           DECLARE_DYNCREATE(theClass)
         在类的实现中添加动态创建的实现宏 
           IMPLEMENT_DYNCREATE(theClass,baseClass)
  2.3 使用
 3.实现原理
  3.1 展开宏
   见代码
  3.2 成员的作用
   3.2.1 CreateObject()  -- 静态的成员函数。作用是new对象
   3.2.2 classCDog  -- 静态的结构体变量。m_pfnCreateObject保存了3.2.1 CreateObject()函数的地址
  3.3 创建过程
   
   
   
    
      
   