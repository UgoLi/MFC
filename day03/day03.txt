一、MFC消息映射机制
 1. 概念
  消息映射指的是消息ID和消息处理函数的映射。
  
 2. 消息映射机制的使用
  2.1 类必须直接或间接派生自CCmdTarget类
  2.2 在类的定义中必须添加消息映射声明宏
      DECLARE_MESSAGE_MAP
  2.3 在类的实现中必须添加消息映射实现宏
      BEGIN_MESSAGE_MAP(theClass,baseClass)
        ON_WM_CREATE()
        ON_WM_PAINT()
      END_MESSAGE_MAP()
  如果一个类满足上述三个条件，就可以使用消息映射机制处理消息
  
 3.实现原理
  3.1 展开宏
     见代码
  3.2 数据类型
   struct AFX_MSGMAP_ENTRY  -- 静态数组中每个元素的类型
   {
	  UINT nMessage;   // 窗口消息ID
	  UINT nCode;      // 通知码
	  UINT nID;        // 命令ID  窗口消息为0
	  UINT nLastID;    // 指定一个范围内的最后一个控件的ID
	  UINT_PTR nSig;   // 消息处理函数的类型
	  AFX_PMSG pfn;    // 消息处理函数的函数指针
   };
   
   struct AFX_MSGMAP     -- 静态结构体变量的类型
   {
	  const AFX_MSGMAP* (PASCAL* pfnGetBaseMap)(); // 保存父类静态函数的地址
	  const AFX_MSGMAP_ENTRY* lpEntries; // 当前类的静态结构体数组的首地址
   }; 
   3.3 成员
    3.3.1 _messageEntries[] -- 静态的结构体数组，保存了当前类对消息的处理的信息。元素的数量就是当前类处理消息的数量。元素类型是AFX_MSGMAP_ENTRY
    3.3.2 messageMap -- 静态的结构体变量，类型是AFX_MSGMAP。
      保存了3.3.1 _messageEntries[]的首地址，和父类CFrameWnd的GetThisMessageMap的地址。
    3.3.3 GetThisMessageMap() -- 静态的成员函数，包含了3.3.1_messageEntries[]和3.3.2 messageMap。返回的是3.3.2 messageMap的地址。
    3.3.4 GetMessageMap() -- 虚函数。调用了当前类的静态函数GetThisMessageMap，所以也返回3.3.2 messageMap的地址。
   3.4 成员之间的关系
     GetMessageMap()
      |-> GetThisMessageMap()
        |-> &messageMap
          |-> &_messageEntries[0] 当前类对消息的处理的信息
             WM_CREATE  <===> OnCreate
             WM_PAINT   <===> OnPaint
          |-> &CFrameWnd::GetThisMessageMap()
            |-> &CFrameWnd::messageMap
              |-> &CFrameWnd::_messageEntries[0] CFrameWnd类对消息处理的信息
                 WM_CREATE  <===> OnCreate
                 WM_SIZE    <===> OnSize
                 ....
              |-> &CWnd::GetThisMessageMap()
               |-> &CWnd::messageMap
                 |-> &CWnd::_messageEntries[0] CWnd类对消息的处理的信息
                   WM_CLOSE  <===> OnClose
                   ...
                 |-> &CCmdTarget::GetThisMessageMap()
                 
   3.5 消息处理的流程
    见辅助文件
    
   面试问题：简单描述消息映射的原理？
   答：消息映射指的是消息ID和消息处理函数的对应关系。
       我们要在相应的类中添加消息映射的相关宏以及消息处理函数。
       当展开消息映射宏后，会形成一个继承层次关系上的消息的处理的链表。
       根据消息ID遍历链表和保存消息处理信息的数组，查找并调用消息处理函数。
 
 4.MFC的消息分类
  4.1 标准Windows消息(窗口消息) -- 与窗口相关的、键盘、鼠标、绘图、定时器消息等
    ON_WM_XXX
  4.2 命令消息(WM_COMMAND) -- 菜单、加速键、工具栏等
    ON_COMMAND( 命令ID, 函数名 )
    ON_COMMAND_RANGE(id,idLast,函数名);
  4.3 通知消息  -- 大部分的控件的消息都属于通知消息
    ON_EN_CHANGE( 控件ID,函数名)
  4.4 自定义消息
   4.4.1 定义消息
     #define WM_MYMESSAGE WM_USER + n
   4.4.2 添加消息映射宏
     ON_MESSAGE( 消息ID, 函数名 )
   4.4.3 添加消息处理函数的声明和实现
   4.4.4 发送自定义消息
    SendMessage
  